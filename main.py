# -*- coding: utf-8 -*-
"""News summariser ai agent - Telebot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11uUm7QaYFLm4TIO7Ilw_v8WPLFPpzgU_

## Dependencies
"""

!pip install aiogram  newsapi-python

"""# Imports"""

# Telebot
from aiogram import Bot, Dispatcher, html
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

# News api
from newsapi import NewsApiClient

# AI api
from openai import OpenAI

# Others
import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta
import pandas as pd
import json

# User data from colab - secrets
from google.colab import userdata

"""## NEWS API side

"""

class NewsApi:

  def __init__(self, language ="en", country = "us", category = "general"):
    """Initialise the news api with predefined parameters"""
    self.lang = language
    self.country = country
    self.category = category
    self.fetcher = NewsApiClient(api_key = userdata.get("newsapi-py"))


  def __str__(self):
    return f"You are  getting {self.category} news from {self.country} in {self.lang}."

  # Setters #

  def set_country(self, country):
    self.country = country
    return f"The country value has been set for {country}"


  def set_language(self, language):
    self.lang = language
    return f"The news language has been changed to {language}"


  def set_category(self, category):
    self.category = category
    return f"The news category has been changed to {category}"

  # Refactor #

  def refactor(self, articles):
    """Refactoring the api result"""

    # Handling empty result
    if len(articles) == 0:
      return f"No results found"

    # Refactoring all the news
    result = []
    for index, article in enumerate(articles):
      result.append(f"{index+1}.{article['content']}")
    return "/n".join(result)


  # Fetchers #

  def get_headlines(self, q = " "):
    """Returns the headline relevant to the given query or recent headline otherwise"""

    articles = self.fetcher.get_top_headlines(q = q, category = self.category, language = self.lang, country = self.country)["articles"]

    # Refactoring result
    return self.refactor(articles)


  def get_everything(self,q = "", timeframe  = 30 ):
    """Returns summary relevant news articles for the given query"""

    now = datetime.now()
    param_to= now.strftime("%Y-%m-%d")
    param_from = (now - timedelta(days = timeframe)).strftime("%Y-%m-%d")

    # Fetching news
    articles = self.fetcher.get_everything(q = q, from_param = param_from , to = param_to, language = self.lang, sort_by = "relevancy")["articles"]

    # Refacting result
    return self.refactor(articles)

"""## OpenAI side"""

class OpenAiApi:

  def __init__(self):
    """Initialising Open AI client"""
    self.client = OpenAI(api_key = userdata.get("openai"))

  def extract_news_parameters(self, user_input):
    """Extracts and returns the paramters that used in Newsapi-py from user input query"""

    system_prompt = """Extract key variables from user input:
      - Query (main topic of the news)
      - Time Frame (relative time in days as an integer)
      - Country (2-letter ISO 3166-1 code, or None if not mentioned)
      - Language (2-letter ISO-639-1 code, or None if not mentioned)
      - Category (one of: sports, technology, business, entertainment, health, science, general, or None)

      Always return a valid JSON object with all fields. If a field is missing, set its value to None.
      Example Output:
      {
        "Query": "Latest AI advancements",
        "Time Frame": 7,
        "Country": "US",
        "Language": "en",
        "Category": "technology"
      }
      """

    response = self.client.chat.completions.create(
          model="gpt-4",
          messages=[
              {"role": "system", "content": system_prompt},
              {"role": "user", "content": user_input}
          ],
          temperature=0  # Ensure consistent structured output
      )

      # Extract response content
    response_text = response.choices[0].message.content
    return response_text
    # try:
    #     extracted_data = json.loads(response_text)  # Convert response to JSON
    #       # Ensure all expected keys exist in the response
    #     default_structure = {
    #           "Query": None,
    #           "Time Frame": None,
    #           "Country": None,
    #           "Language": None,
    #           "Category": None
    #       }
    #     return {**default_structure, **extracted_data}  # Merge with default
    # except json.JSONDecodeError:
    #     return {
    #           "Query": None,
    #           "Time Frame": None,
    #           "Country": None,
    #           "Language": None,
    #           "Category": None
    #       }  # Return default empty structure on failure

"""# Mediator pattern

"""

class NewsBotMediator:
  """
  Central mediator handling interactions between Newsapi-py, OpenAI and aiogram
  """

  def __init__(self):
    """Initialises the Openai and newsapi clients"""

    self.openai_client = OpenAiApi()
    self.newsapi = NewsApi()
    self.newsapi_info = None

  def get_params(self, parameter):
    """Return all the available options for given parameter"""

    if self.newsapi_info is None:
      temp = self.newsapi.fetcher.get_sources()["sources"]
      df = pd.DataFrame(temp)
      self.newsapi_info = {"categories": list(df["category"].unique()),
                           "languages": list(df["language"].unique()),
                           "countries": list(df["country"].unique())}

    return self.newsapi_info[parameter]


  def query_router(self, query):
    """Routing set commands and query commands"""
    temp = query.split(" ")
    if temp[0] == "set":
      return self.set_parameter(temp[1], temp[2])
    else:
      return self.news(query)


  def set_parameter(self, parameter, value):
    """Setting parameters from users"""
    if parameter == "country" and value in self.get_params("countries"):
      return self.newsapi.set_country(value)

    if parameter == "category" and value in self.get_params("categories"):
      return self.newsapi.set_category(value)

    if parameter == "language" and value in self.get_params("languages"):
      return self.newsapi.set_language(value)

    return f"Set operation has been failed due to either option is not available or the given syntax is wrong"


  def news(self, input_query):
    """Return the news summary for the given input query"""
    params = self.openai_client.extract_news_parameters(input)
    q = params["Query"] if params["Query"] is not None else ""
    timeframe = params["Time Frame"] if params["Time Frame"] is not None else 3
    if q =="":
      result = self.headlines()
    else:
      result = self.newsapi.get_everything(q = q, timeframe =  timeframe)

    return result

  def headlines(self):
    """Returns the summary of the headlines for the given parameters"""
    return self.newsapi.get_headlines()

"""## Telebot"""

# api_key for news_summary_agent
telebot_token = userdata.get("news_summary_agent_bot")

# Aiogram dispatcher connection
dp = Dispatcher()

# Mediator instance
mediator = NewsBotMediator()

# Handlers #

# /start handler
@dp.message(CommandStart())
async def command_start_handler(message:Message):
    """
    This handles the first message after the "/start"
    """

    await message.answer(f"Hello, {html.bold(message.from_user.full_name)}! This is news summariser powered by opeai. {mediator.newsapi}")

# /help handler
@dp.message(Command("help"))
async def help_handler(message:Message):
    """
    This handles the command /help
    """
    text = """
    Here is some usefull commands to get more out this bot:
    /start  - To getting started with news summariser
    /help   - To get help
    /option - To get list of all available options
    /info   - To get current options / Default options
    """
    await message.answer(text)


# /option handler
@dp.message(Command("option"))
async def info_handler(message:Message):
    """
    This handles the command "/info"
    """
    text = f"""{mediator.newsapi}.
    \nIf you want to change parameter:
    \nCountry--> set country {mediator.get_params('countries')}.
    \nCategory--> set category {mediator.get_params('categories')}.
    \nLanguage--> set language {mediator.get_params('languages')}"""
    await message.answer(text)


# /headline handler
@dp.message(Command("headline"))
async def headline_summary(message:Message):
  """
  This will return general healine
  """

  headline = mediator.headlines()
  await message.answer(headline)



# News Query Handler
@dp.message()
async def echo_handler(message:Message):
    """
    This handles any receiving message, except for the first message. This replies the same message back to the user
    """
    # try:
    #     result = mediator.query_router(str(message.text))
    #     await message.answer(str(result)[:4095])
    # except TypeError:
    #     await message.answer(f"UNSUPPORTED TYPE: {message}, please try again with supported type inputs")

    result = mediator.query_router(str(message.text))
    await message.answer(str(result)[:4095])


@dp.message()
async def main():
    """
    Initilisng bot
    """
    bot = Bot(token = telebot_token, default =DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__=="__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    await main()